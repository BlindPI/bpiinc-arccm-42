// UUID Validation Utilities
// Provides consistent UUID validation and handling across the application

/**
 * Validates if a string is a properly formatted UUID
 * @param uuid - The string to validate
 * @returns boolean indicating if the string is a valid UUID
 */
export const isValidUUID = (uuid: string): boolean => {
  if (!uuid || typeof uuid !== 'string') {
    return false;
  }
  
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
  return uuidRegex.test(uuid);
};

/**
 * Validates an array of UUIDs
 * @param uuids - Array of strings to validate
 * @returns boolean indicating if all strings are valid UUIDs
 */
export const areValidUUIDs = (uuids: string[]): boolean => {
  if (!Array.isArray(uuids) || uuids.length === 0) {
    return false;
  }
  
  return uuids.every(uuid => isValidUUID(uuid));
};

/**
 * Sanitizes and validates a UUID, throwing an error if invalid
 * @param uuid - The UUID string to validate
 * @param fieldName - Name of the field for error messages
 * @returns The validated UUID string
 * @throws Error if UUID is invalid
 */
export const validateUUID = (uuid: string, fieldName: string = 'UUID'): string => {
  if (!isValidUUID(uuid)) {
    throw new Error(`Invalid ${fieldName} format: ${uuid}. Expected UUID format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`);
  }
  return uuid;
};

/**
 * Checks if a string looks like an integer ID (legacy format)
 * @param id - The ID string to check
 * @returns boolean indicating if the string looks like an integer
 */
export const isIntegerID = (id: string): boolean => {
  if (!id || typeof id !== 'string') {
    return false;
  }
  
  return /^\d+$/.test(id);
};

/**
 * Provides helpful error message for UUID validation failures
 * @param id - The invalid ID
 * @param context - Context where the validation failed
 * @returns Formatted error message
 */
export const getUUIDErrorMessage = (id: string, context: string): string => {
  if (isIntegerID(id)) {
    return `${context}: Integer ID "${id}" detected. System now requires UUID format. Please use proper UUID values.`;
  }
  
  return `${context}: Invalid UUID format "${id}". Expected format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`;
};

/**
 * UUID validation result type
 */
export interface UUIDValidationResult {
  isValid: boolean;
  error?: string;
  uuid?: string;
}

/**
 * Validates UUID and returns detailed result
 * @param uuid - The UUID to validate
 * @param fieldName - Name of the field for error messages
 * @returns Validation result with details
 */
export const validateUUIDWithResult = (uuid: string, fieldName: string = 'UUID'): UUIDValidationResult => {
  if (!uuid || typeof uuid !== 'string') {
    return {
      isValid: false,
      error: `${fieldName} is required and must be a string`
    };
  }
  
  if (isIntegerID(uuid)) {
    return {
      isValid: false,
      error: `${fieldName} "${uuid}" appears to be an integer ID. System requires UUID format.`
    };
  }
  
  if (!isValidUUID(uuid)) {
    return {
      isValid: false,
      error: `${fieldName} "${uuid}" is not a valid UUID format`
    };
  }
  
  return {
    isValid: true,
    uuid: uuid
  };
};

/**
 * Generates a new UUID (for testing or default values)
 * Note: In production, UUIDs should be generated by the database
 * @returns A new UUID string
 */
export const generateUUID = (): string => {
  return crypto.randomUUID();
};

/**
 * Constants for UUID validation
 */
export const UUID_CONSTANTS = {
  REGEX: /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i,
  LENGTH: 36,
  EXAMPLE: '123e4567-e89b-12d3-a456-426614174000'
} as const;